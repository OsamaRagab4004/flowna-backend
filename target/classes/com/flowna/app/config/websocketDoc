// RoomController.java
package com.example.websocketdemo.controller; // Adjust package name

import com.example.websocketdemo.model.ChatMessage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.messaging.handler.annotation.DestinationVariable;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.Payload;
import org.springframework.messaging.simp.SimpMessageHeaderAccessor;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Controller;

@Controller
public class RoomController {

    private static final Logger logger = LoggerFactory.getLogger(RoomController.class);

    // SimpMessagingTemplate is used to send messages to STOMP destinations
    @Autowired
    private SimpMessagingTemplate messagingTemplate;

    /**
     * Handles messages sent to "/app/room/{roomId}/sendMessage".
     * This message is then broadcast to all subscribers of "/topic/room/{roomId}".
     *
     * @param roomId  The ID of the room, extracted from the destination path.
     * @param message The ChatMessage payload sent by the client.
     * @return The ChatMessage, which will be sent to the destination.
     */
    @MessageMapping("/room/{roomId}/sendMessage")
    // @SendTo("/topic/room/{roomId}") // Alternative: directly sends return value to this topic
    public void sendMessage(@DestinationVariable String roomId, @Payload ChatMessage message) {
        logger.info("Received message for room {}: {}", roomId, message);
        // Here, you can add logic like saving the message to a database,
        // validating the user, etc.

        // Ensure the message has the correct roomId if not already set by client
        if (message.getRoomId() == null || !message.getRoomId().equals(roomId)) {
            message.setRoomId(roomId); // Set or correct the roomId
        }

        // Broadcast the message to all subscribers of the room's topic
        messagingTemplate.convertAndSend(String.format("/topic/room/%s", roomId), message);
    }

    /**
     * Handles a user joining a room. This is typically triggered when a client subscribes
     * to a room's topic, but we can also have an explicit join message.
     * This method adds the user to the STOMP session attributes and broadcasts a JOIN message.
     *
     * @param roomId  The ID of the room.
     * @param message The ChatMessage (e.g., containing sender info).
     * @param headerAccessor Accessor for STOMP message headers, used to get session attributes.
     */
    @MessageMapping("/room/{roomId}/join")
    public void joinRoom(@DestinationVariable String roomId, @Payload ChatMessage message,
                         SimpMessageHeaderAccessor headerAccessor) {
        logger.info("User {} joining room {}", message.getSender(), roomId);

        // Store user and room information in the WebSocket session
        // This is useful for knowing which user is in which room, especially on disconnect.
        if (headerAccessor.getSessionAttributes() != null) {
            headerAccessor.getSessionAttributes().put("username", message.getSender());
            headerAccessor.getSessionAttributes().put("roomId", roomId);
        } else {
            logger.warn("Session attributes are null for user {} in room {}", message.getSender(), roomId);
        }

        message.setType("JOIN");
        message.setContent(message.getSender() + " joined!");
        message.setRoomId(roomId); // Ensure roomId is set

        messagingTemplate.convertAndSend(String.format("/topic/room/%s", roomId), message);
    }

    // Note: User leaving a room is often handled by listening to WebSocket disconnect events.
    // See WebSocketEventListener.java in typical Spring examples for handling disconnects
    // and broadcasting a LEAVE message. For simplicity, we'll focus on join and send here.
    // If a client explicitly wants to "leave" without disconnecting, they can send a message
    // to a "/room/{roomId}/leave" endpoint, and you can broadcast a LEAVE message similarly.
}
