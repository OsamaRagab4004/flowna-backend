package com.flowna.app.studySquad.Agents;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.flowna.app.email.EmailService;
import com.flowna.app.studySquad.Event;
import com.flowna.app.studySquad.EventType;
import com.flowna.app.studySquad.RoomLecture.RoomLectureResponse;
import com.flowna.app.studySquad.RoomLecture.RoomLectureService;
import com.flowna.app.user.User;
import org.springframework.http.ResponseEntity;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

@RestController
@RequestMapping("/api/v1/rooms/gemini/study")
public class StudyController {

    private final LinkManagerService linkManagerService;
    private final ObjectMapper objectMapper;
    private final RoomLectureService roomLectureService;
    private final SimpMessagingTemplate messagingTemplate;
    private final EmailService emailService;

    public StudyController(LinkManagerService linkManagerService, ObjectMapper objectMapper, RoomLectureService roomLectureService, SimpMessagingTemplate messagingTemplate, EmailService emailService) {
        this.linkManagerService = linkManagerService;
        this.objectMapper = objectMapper;
        this.roomLectureService = roomLectureService;
        this.messagingTemplate = messagingTemplate;
        this.emailService = emailService;
    }

    @PostMapping("/generate")
    public CompletableFuture<ResponseEntity<RoomLectureResponse>> generateStudyMaterials(
            @RequestBody StudyRequest request,
            @AuthenticationPrincipal User user) {

        if (user == null) {
            // In a real application, this would likely be handled by Spring Security's configuration
            throw new IllegalStateException("User must be authenticated.");
        }

        Map<String, Object> variables = new HashMap<>();
        variables.put("msg",user.getUsername() + " generated a lecture " + request);
        emailService.sendSimpleEmail("webflowna@gmail.com",
                "Lecture generated by " + user.getUsername(),
                "messageTemplate.html",variables
        );

        return linkManagerService.generateStudyMaterialAndSave(request, user.getId())
                .thenApply(response -> {
                    try {
                        String responseAsString = objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(response);
                        System.out.println("Generated Study Materials and saved as lecture:\n" + responseAsString);
                    } catch (JsonProcessingException e) {
                        System.err.println("Could not serialize response to JSON: " + e.getMessage());
                        // Fallback to default toString()
                        System.out.println("Generated Study Materials and saved as lecture (raw): " + response);
                    }

                    List<RoomLectureResponse> lectures = roomLectureService.getAllLecturesForRoom(request.getRoomJoinCode() , user.getId());
                    Event event = Event.builder()
                            .eventType(EventType.UPDATE_LECTURE_LIST)
                            .payload(lectures)
                            .build();
                    // Here you would typically publish the event to a message broker or event bus
                    messagingTemplate.convertAndSend("/topic/rooms/" + request.getRoomJoinCode(), event);
                    return ResponseEntity.ok(response);
                })
                .exceptionally(ex -> {
                    System.err.println("Error generating study materials: " + ex.getMessage());
                    return ResponseEntity.badRequest().build();
                });
    }


    @GetMapping("/lectures/{roomJoinCode}")
    public ResponseEntity<List<RoomLectureResponse>> getLecturesForRoom(
            @PathVariable String roomJoinCode,
            @AuthenticationPrincipal User user) {

        if (user == null) {
            throw new IllegalStateException("User must be authenticated.");
        }

        List<RoomLectureResponse> lectures = roomLectureService.getAllLecturesForRoom(roomJoinCode, user.getId());
        return ResponseEntity.ok(lectures);



    }




    @GetMapping("/lecture/{lectureId}")
    public ResponseEntity<RoomLectureResponse> getLectureById(
            @PathVariable Integer lectureId,
            @AuthenticationPrincipal User user) {

        if (user == null) {
            throw new IllegalStateException("User must be authenticated.");
        }

        RoomLectureResponse lecture = roomLectureService.getLectureById(lectureId, user.getId());
        return ResponseEntity.ok(lecture);
    }





}