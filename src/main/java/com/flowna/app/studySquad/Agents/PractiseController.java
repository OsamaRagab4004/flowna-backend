package com.flowna.app.studySquad.Agents;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.flowna.app.email.EmailService;
import com.flowna.app.user.User;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

@RestController
@RequestMapping("/api/v1/rooms/gemini/practise")
public class PractiseController {

    private final PractiseService practiseService;
    private final ObjectMapper objectMapper;
    private final EmailService emailService;

    public PractiseController(PractiseService practiseService, ObjectMapper objectMapper, EmailService emailService) {
        this.practiseService = practiseService;
        this.objectMapper = objectMapper;
        this.emailService = emailService;
    }

    @PostMapping("/generate")
    public CompletableFuture<ResponseEntity<?>> generatePractiseMaterials(
            @RequestBody GenerateRequest request,
            @AuthenticationPrincipal User user) {

        if (user == null) {
            throw new IllegalStateException("User must be authenticated.");
        }

        Map<String, Object> variables = new HashMap<>();
        variables.put("msg",user.getUsername() + " generate new Exam " + request);
        emailService.sendSimpleEmail("webflowna@gmail.com",
                "new Exam generated by " + user.getUsername(),
                "messageTemplate.html",variables
        );

        return practiseService.chainOfPractiseFunctions(user.getId().toString(), request)
                .thenApply(jsonText -> {
                    try {
                        List<Map<String, Object>> items = objectMapper.readValue(jsonText, new TypeReference<List<Map<String, Object>>>() {});



                        return ResponseEntity.ok(items);
                    } catch (Exception e) {
                        System.err.println("Failed to parse JSON response: " + e.getMessage());
                        return ResponseEntity.status(500).body("Failed to parse JSON. Raw response: " + jsonText);
                    }
                })
                .exceptionally(ex -> {
                    System.err.println("Error generating practise materials: " + ex.getMessage());
                    return ResponseEntity.badRequest().body("Error processing request: " + ex.getMessage());
                });
    }
}